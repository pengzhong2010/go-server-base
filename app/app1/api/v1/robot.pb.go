// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/app1/api/v1/robot.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Robot struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 昵称
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	// 创建人
	CreatorUid string `protobuf:"bytes,3,opt,name=creator_uid,json=creatorUid,proto3" json:"creator_uid"`
	// 机器人地址
	Webhook string `protobuf:"bytes,4,opt,name=webhook,proto3" json:"webhook"`
	// 标签
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag"`
	// 组件
	ComponentIds         []int64  `protobuf:"varint,6,rep,packed,name=componentIds,proto3" json:"component_ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Robot) Reset()         { *m = Robot{} }
func (m *Robot) String() string { return proto.CompactTextString(m) }
func (*Robot) ProtoMessage()    {}
func (*Robot) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{0}
}
func (m *Robot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Robot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Robot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Robot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Robot.Merge(m, src)
}
func (m *Robot) XXX_Size() int {
	return m.Size()
}
func (m *Robot) XXX_DiscardUnknown() {
	xxx_messageInfo_Robot.DiscardUnknown(m)
}

var xxx_messageInfo_Robot proto.InternalMessageInfo

type RobotWithNickname struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 昵称
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	// 类别
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotWithNickname) Reset()         { *m = RobotWithNickname{} }
func (m *RobotWithNickname) String() string { return proto.CompactTextString(m) }
func (*RobotWithNickname) ProtoMessage()    {}
func (*RobotWithNickname) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{1}
}
func (m *RobotWithNickname) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotWithNickname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotWithNickname.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotWithNickname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotWithNickname.Merge(m, src)
}
func (m *RobotWithNickname) XXX_Size() int {
	return m.Size()
}
func (m *RobotWithNickname) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotWithNickname.DiscardUnknown(m)
}

var xxx_messageInfo_RobotWithNickname proto.InternalMessageInfo

type RobotCReq struct {
	// 昵称
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname" validate:"required"`
	// 机器人地址
	Webhook string `protobuf:"bytes,4,opt,name=webhook,proto3" json:"webhook" validate:"required"`
	// 标签
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag" validate:"required"`
	// 组件
	ComponentIds         []int64  `protobuf:"varint,6,rep,packed,name=componentIds,proto3" json:"component_ids" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotCReq) Reset()         { *m = RobotCReq{} }
func (m *RobotCReq) String() string { return proto.CompactTextString(m) }
func (*RobotCReq) ProtoMessage()    {}
func (*RobotCReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{2}
}
func (m *RobotCReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotCReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotCReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotCReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotCReq.Merge(m, src)
}
func (m *RobotCReq) XXX_Size() int {
	return m.Size()
}
func (m *RobotCReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotCReq.DiscardUnknown(m)
}

var xxx_messageInfo_RobotCReq proto.InternalMessageInfo

type RobotUReq struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" validate:"required"`
	// 昵称
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	// 机器人地址
	Webhook string `protobuf:"bytes,4,opt,name=webhook,proto3" json:"webhook"`
	// 标签
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag"`
	// 组件
	ComponentIds         []int64  `protobuf:"varint,6,rep,packed,name=componentIds,proto3" json:"component_ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotUReq) Reset()         { *m = RobotUReq{} }
func (m *RobotUReq) String() string { return proto.CompactTextString(m) }
func (*RobotUReq) ProtoMessage()    {}
func (*RobotUReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{3}
}
func (m *RobotUReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotUReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotUReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotUReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotUReq.Merge(m, src)
}
func (m *RobotUReq) XXX_Size() int {
	return m.Size()
}
func (m *RobotUReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotUReq.DiscardUnknown(m)
}

var xxx_messageInfo_RobotUReq proto.InternalMessageInfo

type ListRobotReq struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 模糊搜索
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"s" form:"s"`
	// team_id
	TeamId int64 `protobuf:"varint,10,opt,name=team_id,json=teamId,proto3" json:"team_id" form:"team_id"`
	// component_id
	ComponentId int64 `protobuf:"varint,11,opt,name=component_id,json=componentId,proto3" json:"component_id" form:"component_id"`
	// 分页
	PageSize int64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"page_size" form:"page_size"`
	// 分页
	PageNum int64 `protobuf:"varint,4,opt,name=pageNum,proto3" json:"page_num" form:"page_num"`
	// 开始时间
	Stime int64 `protobuf:"varint,5,opt,name=stime,proto3" json:"start_date" form:"start_date"`
	// 结束时间
	Etime int64 `protobuf:"varint,6,opt,name=etime,proto3" json:"end_date" form:"end_date"`
	// 排序字段
	Orderby string `protobuf:"bytes,7,opt,name=orderby,proto3" json:"orderby" form:"orderby"`
	// 排序字段
	Asc string `protobuf:"bytes,8,opt,name=asc,proto3" json:"asc" form:"asc"`
	// 我的
	Mine                 int64    `protobuf:"varint,9,opt,name=mine,proto3" json:"mine" form:"mine"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRobotReq) Reset()         { *m = ListRobotReq{} }
func (m *ListRobotReq) String() string { return proto.CompactTextString(m) }
func (*ListRobotReq) ProtoMessage()    {}
func (*ListRobotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{4}
}
func (m *ListRobotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRobotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRobotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRobotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRobotReq.Merge(m, src)
}
func (m *ListRobotReq) XXX_Size() int {
	return m.Size()
}
func (m *ListRobotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRobotReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRobotReq proto.InternalMessageInfo

type ListRobotResp struct {
	Data                 []*RobotForList `protobuf:"bytes,1,rep,name=data,proto3" json:"list"`
	Count                int64           `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListRobotResp) Reset()         { *m = ListRobotResp{} }
func (m *ListRobotResp) String() string { return proto.CompactTextString(m) }
func (*ListRobotResp) ProtoMessage()    {}
func (*ListRobotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{5}
}
func (m *ListRobotResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRobotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRobotResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRobotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRobotResp.Merge(m, src)
}
func (m *ListRobotResp) XXX_Size() int {
	return m.Size()
}
func (m *ListRobotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRobotResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListRobotResp proto.InternalMessageInfo

type RobotForList struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 昵称
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	// 创建人
	CreatorUid string `protobuf:"bytes,3,opt,name=creator_uid,json=creatorUid,proto3" json:"creator_uid"`
	// 机器人地址
	Webhook string `protobuf:"bytes,4,opt,name=webhook,proto3" json:"webhook"`
	// 标签
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag"`
	// 创建时间
	CTime int64 `protobuf:"varint,6,opt,name=cTime,proto3" json:"create_time" gorm:"-"`
	// 更新时间
	MTime int64 `protobuf:"varint,7,opt,name=mTime,proto3" json:"update_time" gorm:"-"`
	// 删除标志位
	IsDeleted int64 `protobuf:"varint,8,opt,name=isDeleted,proto3" json:"is_deleted"`
	// 团队信息
	TeamComponent        []*RobotWithTeamAndComponentIdName `protobuf:"bytes,9,rep,name=team_component,json=teamComponent,proto3" json:"team_component"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *RobotForList) Reset()         { *m = RobotForList{} }
func (m *RobotForList) String() string { return proto.CompactTextString(m) }
func (*RobotForList) ProtoMessage()    {}
func (*RobotForList) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{6}
}
func (m *RobotForList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotForList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotForList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotForList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotForList.Merge(m, src)
}
func (m *RobotForList) XXX_Size() int {
	return m.Size()
}
func (m *RobotForList) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotForList.DiscardUnknown(m)
}

var xxx_messageInfo_RobotForList proto.InternalMessageInfo

type RobotWithTeamAndComponentIdName struct {
	// team_id
	TeamId int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id"`
	// 团队名称
	TeamName string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name"`
	// component_id
	ComponentId int64 `protobuf:"varint,3,opt,name=component_id,json=componentId,proto3" json:"component_id"`
	// 组件名称
	ComponentName        string   `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotWithTeamAndComponentIdName) Reset()         { *m = RobotWithTeamAndComponentIdName{} }
func (m *RobotWithTeamAndComponentIdName) String() string { return proto.CompactTextString(m) }
func (*RobotWithTeamAndComponentIdName) ProtoMessage()    {}
func (*RobotWithTeamAndComponentIdName) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0fdd6021d0ae32, []int{7}
}
func (m *RobotWithTeamAndComponentIdName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotWithTeamAndComponentIdName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotWithTeamAndComponentIdName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotWithTeamAndComponentIdName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotWithTeamAndComponentIdName.Merge(m, src)
}
func (m *RobotWithTeamAndComponentIdName) XXX_Size() int {
	return m.Size()
}
func (m *RobotWithTeamAndComponentIdName) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotWithTeamAndComponentIdName.DiscardUnknown(m)
}

var xxx_messageInfo_RobotWithTeamAndComponentIdName proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Robot)(nil), "app.app1.v1.Robot")
	proto.RegisterType((*RobotWithNickname)(nil), "app.app1.v1.RobotWithNickname")
	proto.RegisterType((*RobotCReq)(nil), "app.app1.v1.RobotCReq")
	proto.RegisterType((*RobotUReq)(nil), "app.app1.v1.RobotUReq")
	proto.RegisterType((*ListRobotReq)(nil), "app.app1.v1.ListRobotReq")
	proto.RegisterType((*ListRobotResp)(nil), "app.app1.v1.ListRobotResp")
	proto.RegisterType((*RobotForList)(nil), "app.app1.v1.RobotForList")
	proto.RegisterType((*RobotWithTeamAndComponentIdName)(nil), "app.app1.v1.RobotWithTeamAndComponentIdName")
}

func init() { proto.RegisterFile("app/app1/api/v1/robot.proto", fileDescriptor_df0fdd6021d0ae32) }

var fileDescriptor_df0fdd6021d0ae32 = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xaf, 0xbd, 0x71, 0x6c, 0x8f, 0x93, 0xb4, 0x99, 0xaa, 0xcd, 0xd6, 0x69, 0xbd, 0x61, 0x02,
	0xaa, 0x55, 0x6a, 0x3b, 0x4e, 0x55, 0xaa, 0x04, 0x10, 0xaa, 0x53, 0x81, 0x82, 0xaa, 0xa8, 0x0c,
	0x8d, 0x90, 0x10, 0x92, 0x19, 0x7b, 0xa7, 0x9b, 0x51, 0xb2, 0x3b, 0xdb, 0xdd, 0x71, 0x20, 0x39,
	0x72, 0xe4, 0xca, 0x85, 0xaf, 0xc3, 0xad, 0x47, 0x24, 0x0e, 0x9c, 0x58, 0x41, 0xc2, 0x69, 0x8f,
	0x16, 0x1f, 0x00, 0xcd, 0xcc, 0x7a, 0xbd, 0x8e, 0x63, 0x51, 0xc4, 0x01, 0xf5, 0x62, 0xcf, 0xfc,
	0xde, 0xbf, 0x7d, 0xbf, 0xf7, 0xe6, 0xcd, 0x80, 0x55, 0xe2, 0xfb, 0x2d, 0xe2, 0xfb, 0xed, 0x16,
	0xf1, 0x59, 0xeb, 0xb8, 0xdd, 0x0a, 0x78, 0x8f, 0x8b, 0xa6, 0x1f, 0x70, 0xc1, 0x61, 0x85, 0xf8,
	0x7e, 0x53, 0x0a, 0x9b, 0xc7, 0xed, 0x6a, 0xc3, 0x61, 0xe2, 0x60, 0xd0, 0x6b, 0xf6, 0xb9, 0xdb,
	0x72, 0xb8, 0xc3, 0x5b, 0x4a, 0xa7, 0x37, 0x78, 0xa1, 0x76, 0x6a, 0xa3, 0x56, 0xda, 0xb6, 0xba,
	0xea, 0x70, 0xee, 0x1c, 0xd1, 0xb1, 0x16, 0x75, 0x7d, 0x71, 0x92, 0x08, 0x6f, 0x27, 0x42, 0x19,
	0x93, 0x78, 0x1e, 0x17, 0x44, 0x30, 0xee, 0x85, 0x23, 0xe9, 0xc5, 0x6f, 0xea, 0x73, 0xd7, 0xe5,
	0x9e, 0x96, 0xa2, 0xbf, 0x72, 0xa0, 0x80, 0xe5, 0x47, 0xc2, 0x9b, 0x20, 0xcf, 0x6c, 0x33, 0xb7,
	0x96, 0xab, 0x1b, 0x9d, 0xf9, 0x38, 0xb2, 0xf2, 0xcc, 0xc6, 0x79, 0x66, 0xc3, 0x3a, 0x28, 0x79,
	0xac, 0x7f, 0xe8, 0x11, 0x97, 0x9a, 0xf9, 0xb5, 0x5c, 0xbd, 0xdc, 0x59, 0x88, 0x23, 0x2b, 0xc5,
	0x70, 0xba, 0x82, 0x1b, 0xa0, 0xd2, 0x0f, 0x28, 0x11, 0x3c, 0xe8, 0x0e, 0x98, 0x6d, 0x1a, 0x4a,
	0xf9, 0x6a, 0x1c, 0x59, 0x59, 0x18, 0x83, 0x64, 0xb3, 0xcf, 0x6c, 0xf8, 0x0e, 0x28, 0x7e, 0x43,
	0x7b, 0x07, 0x9c, 0x1f, 0x9a, 0x73, 0x4a, 0xbb, 0x12, 0x47, 0xd6, 0x08, 0xc2, 0xa3, 0x05, 0xbc,
	0x05, 0x0c, 0x41, 0x1c, 0xb3, 0xa0, 0x54, 0x8a, 0x71, 0x64, 0xc9, 0x2d, 0x96, 0x3f, 0xf0, 0x21,
	0x58, 0xe8, 0x73, 0xd7, 0xe7, 0x1e, 0xf5, 0xc4, 0xae, 0x1d, 0x9a, 0xf3, 0x6b, 0x46, 0xdd, 0xe8,
	0x2c, 0xc7, 0x91, 0xb5, 0x98, 0xe2, 0x5d, 0x66, 0x87, 0x78, 0x42, 0x0d, 0x85, 0x60, 0x59, 0x65,
	0xfd, 0x05, 0x13, 0x07, 0x7b, 0xa3, 0xef, 0xff, 0xef, 0x0c, 0xdc, 0x06, 0x73, 0xe2, 0xc4, 0xa7,
	0x49, 0xea, 0xa5, 0x38, 0xb2, 0xd4, 0x1e, 0xab, 0x5f, 0xf4, 0x7d, 0x1e, 0x94, 0x55, 0xd4, 0x1d,
	0x4c, 0x5f, 0xc2, 0x8f, 0xa6, 0xbc, 0xae, 0x67, 0xbd, 0x0e, 0x23, 0xeb, 0xfa, 0x31, 0x39, 0x62,
	0x36, 0x11, 0x74, 0x1b, 0x05, 0xf4, 0xe5, 0x80, 0x05, 0xd4, 0x46, 0x99, 0x60, 0x1f, 0x5c, 0x24,
	0x0f, 0x65, 0xc8, 0x9b, 0x65, 0x9e, 0x72, 0xba, 0x91, 0xe5, 0xb4, 0x96, 0x70, 0x3a, 0xcb, 0x4a,
	0x51, 0xfd, 0xf4, 0x52, 0xaa, 0xeb, 0x53, 0x54, 0xcf, 0x72, 0x32, 0x59, 0x81, 0xdf, 0x72, 0x09,
	0x19, 0xfb, 0x92, 0x8c, 0x46, 0x86, 0xfa, 0x3b, 0x9a, 0xfa, 0x59, 0x6e, 0xfe, 0x5d, 0x45, 0xfe,
	0xb7, 0x0e, 0xfb, 0x75, 0x0e, 0x2c, 0x3c, 0x65, 0xa1, 0x50, 0x39, 0xca, 0x14, 0xd7, 0x33, 0x29,
	0x5e, 0x4f, 0x53, 0x2c, 0xbf, 0xe0, 0x81, 0xbb, 0x8d, 0x58, 0x92, 0xd8, 0x3a, 0x30, 0x0e, 0xe9,
	0x49, 0x92, 0x93, 0x8c, 0x91, 0x93, 0x74, 0x96, 0xb4, 0x52, 0x88, 0xb0, 0x94, 0xc2, 0xf7, 0x40,
	0x51, 0x50, 0xe2, 0x76, 0x99, 0x6d, 0x82, 0x94, 0xb1, 0x11, 0x34, 0x8c, 0xac, 0x25, 0xad, 0x9e,
	0x00, 0x08, 0xcf, 0xcb, 0xd5, 0xae, 0x0d, 0x3f, 0xcd, 0x64, 0x22, 0x8d, 0x2b, 0xca, 0xf8, 0x6e,
	0x1c, 0x59, 0x13, 0xb8, 0x24, 0x5e, 0x7b, 0xc8, 0xa2, 0x08, 0x57, 0x32, 0xf9, 0xc1, 0x0f, 0x41,
	0xc9, 0x27, 0x0e, 0xfd, 0x9c, 0x9d, 0xea, 0x6e, 0x37, 0x3a, 0x6f, 0xc5, 0x91, 0x55, 0x96, 0x58,
	0x37, 0x64, 0xa7, 0xb2, 0x7d, 0xaf, 0x69, 0x27, 0x29, 0x84, 0x70, 0x6a, 0x02, 0xb7, 0x40, 0x51,
	0xae, 0xf7, 0x06, 0xae, 0x2a, 0x8b, 0xd1, 0xb1, 0x64, 0xfd, 0x94, 0xaa, 0x37, 0x70, 0x87, 0x91,
	0x75, 0x35, 0x63, 0xec, 0x0d, 0x5c, 0x84, 0x47, 0xfa, 0x70, 0x0b, 0x14, 0x42, 0xc1, 0x5c, 0xaa,
	0x8a, 0x65, 0xa8, 0x43, 0x03, 0x42, 0x41, 0x02, 0xd1, 0x95, 0x9d, 0x32, 0x8c, 0xac, 0xe5, 0x84,
	0xad, 0x14, 0x43, 0x58, 0x5b, 0xc0, 0x87, 0xa0, 0x40, 0x95, 0xe9, 0xfc, 0x38, 0x26, 0xf5, 0xec,
	0x91, 0x61, 0x12, 0x73, 0x84, 0x20, 0xac, 0xb5, 0xe1, 0x23, 0x50, 0xe4, 0x81, 0x4d, 0x83, 0xde,
	0x89, 0x59, 0x54, 0x85, 0x51, 0x7c, 0x27, 0xd0, 0x98, 0xef, 0x04, 0x40, 0x78, 0x24, 0x82, 0x77,
	0x81, 0x41, 0xc2, 0xbe, 0x59, 0x52, 0x46, 0x37, 0x64, 0x57, 0x91, 0xb0, 0x3f, 0x8c, 0x2c, 0xa0,
	0x0d, 0x48, 0xd8, 0x47, 0x58, 0x42, 0xf0, 0x5d, 0x30, 0xe7, 0x32, 0x8f, 0x9a, 0x65, 0xf5, 0x5d,
	0x2b, 0x72, 0x6e, 0xc8, 0xfd, 0x30, 0xb2, 0x2a, 0x5a, 0x55, 0xee, 0x10, 0x56, 0x20, 0x62, 0x60,
	0x31, 0xd3, 0x58, 0xa1, 0x0f, 0x1f, 0x81, 0x39, 0x9b, 0x08, 0x62, 0xe6, 0xd6, 0x8c, 0x7a, 0x65,
	0xf3, 0x56, 0x33, 0x73, 0xcf, 0x34, 0x95, 0xd6, 0xc7, 0x3c, 0x90, 0x16, 0x7a, 0x20, 0x1d, 0x49,
	0x5b, 0x65, 0x00, 0x2d, 0x50, 0xe8, 0xf3, 0x81, 0x27, 0x54, 0xbf, 0x19, 0x9d, 0x72, 0x1c, 0x59,
	0x1a, 0xc0, 0xfa, 0x0f, 0xfd, 0x64, 0x80, 0x85, 0xac, 0x87, 0x37, 0xf4, 0x92, 0x68, 0x83, 0x42,
	0xff, 0xf9, 0xb8, 0xee, 0xab, 0x69, 0x34, 0xda, 0x95, 0x05, 0x96, 0x27, 0xcc, 0x51, 0x34, 0x37,
	0x10, 0xd6, 0x9a, 0xd2, 0xc4, 0x55, 0x26, 0xc5, 0xb1, 0xc9, 0xc0, 0xb7, 0x2f, 0x37, 0x51, 0x9a,
	0xf0, 0x3e, 0x28, 0xb3, 0xf0, 0x09, 0x3d, 0xa2, 0x82, 0xda, 0xaa, 0xe6, 0x46, 0x67, 0x49, 0x36,
	0x27, 0x0b, 0xbb, 0xb6, 0x46, 0xf1, 0x58, 0x01, 0x3a, 0x60, 0x49, 0x1d, 0xd0, 0xf4, 0x50, 0x99,
	0x65, 0x55, 0xbe, 0xfb, 0xd3, 0xe5, 0x93, 0x97, 0xd4, 0x73, 0x4a, 0xdc, 0xc7, 0x9e, 0xbd, 0x33,
	0x3e, 0x82, 0x7b, 0xc4, 0xa5, 0x1d, 0x18, 0x47, 0xd6, 0x05, 0x3f, 0x78, 0x51, 0xee, 0x53, 0x45,
	0x74, 0x9e, 0x03, 0xd6, 0x3f, 0xb8, 0x81, 0x6f, 0x8f, 0x27, 0x8a, 0xae, 0x6d, 0x25, 0x33, 0x51,
	0xd2, 0xf9, 0x71, 0x0f, 0x94, 0x15, 0x94, 0xa9, 0xf2, 0xa2, 0x3c, 0xf4, 0x29, 0x88, 0x4b, 0x72,
	0xa9, 0x3c, 0x3e, 0xb8, 0x30, 0x6b, 0xf4, 0x8c, 0xb8, 0x76, 0x71, 0xd6, 0x4c, 0x0e, 0x95, 0x2d,
	0xb0, 0x34, 0x16, 0xaa, 0x28, 0xba, 0xe0, 0x2a, 0xcb, 0x49, 0x09, 0x1e, 0x0f, 0x5f, 0x19, 0x6f,
	0xf3, 0xdc, 0x00, 0x25, 0x95, 0xe5, 0xe3, 0x67, 0xbb, 0xf0, 0x6b, 0x50, 0xd9, 0x51, 0xe5, 0x4d,
	0x5e, 0x36, 0xd3, 0x94, 0xca, 0x1b, 0xb8, 0xba, 0x32, 0x81, 0xef, 0xab, 0xea, 0xca, 0x03, 0x85,
	0xd6, 0xbe, 0xfb, 0xe5, 0xcf, 0x1f, 0xf2, 0x55, 0x64, 0xca, 0xf7, 0x56, 0xef, 0x88, 0xba, 0x0d,
	0xfa, 0xad, 0x7e, 0xca, 0xb5, 0x74, 0xdb, 0xc8, 0x08, 0x89, 0xfe, 0xac, 0x08, 0xfb, 0xaf, 0x13,
	0xa1, 0x7a, 0x49, 0x04, 0xdd, 0x65, 0xf0, 0x2b, 0x50, 0xd1, 0xad, 0xa2, 0x23, 0xc0, 0x09, 0x4f,
	0xbb, 0x4f, 0x5e, 0xc7, 0xfb, 0xbd, 0x4b, 0xbc, 0xeb, 0x4e, 0x84, 0x9f, 0x81, 0xd2, 0x27, 0x54,
	0xcc, 0x76, 0x0d, 0xa7, 0x13, 0x42, 0x77, 0x94, 0xd7, 0x15, 0x78, 0x63, 0xda, 0xab, 0x43, 0x05,
	0xec, 0x81, 0x72, 0x3a, 0x96, 0xe0, 0xe4, 0x10, 0xca, 0xde, 0x83, 0xd5, 0xea, 0x2c, 0x51, 0xe8,
	0xa3, 0x9a, 0x0a, 0x61, 0xc2, 0x9b, 0xd3, 0x21, 0xe4, 0xd8, 0xea, 0x3c, 0x7b, 0xf5, 0x47, 0xed,
	0xca, 0xab, 0xb3, 0x5a, 0xee, 0xe7, 0xb3, 0x5a, 0xee, 0xf7, 0xb3, 0x5a, 0xee, 0xc7, 0xf3, 0xda,
	0x95, 0x2f, 0xb7, 0x33, 0x6f, 0x69, 0x9f, 0x7a, 0xce, 0xe9, 0x01, 0xf7, 0x9c, 0xcd, 0x8d, 0xf6,
	0x46, 0xcb, 0xe1, 0x8d, 0x90, 0x06, 0xc7, 0x34, 0x68, 0xf4, 0x48, 0x28, 0x1f, 0xc8, 0x13, 0x2f,
	0xe1, 0xf7, 0x8f, 0xdb, 0xbd, 0x79, 0xf5, 0x0c, 0x7e, 0xf0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd3, 0xf5, 0x27, 0x01, 0xba, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RobotAPIClient is the client API for RobotAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RobotAPIClient interface {
	// 机器人管理-创建
	CreateRobot(ctx context.Context, in *RobotCReq, opts ...grpc.CallOption) (*UpdateResp, error)
	// 机器人管理-更新
	UpdateRobot(ctx context.Context, in *RobotUReq, opts ...grpc.CallOption) (*UpdateResp, error)
	// 机器人管理-删除
	DeleteRobot(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UpdateResp, error)
	// 机器人管理-详情
	GetRobot(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*Robot, error)
	// 机器人管理-列表
	ListRobot(ctx context.Context, in *ListRobotReq, opts ...grpc.CallOption) (*ListRobotResp, error)
}

type robotAPIClient struct {
	cc *grpc.ClientConn
}

func NewRobotAPIClient(cc *grpc.ClientConn) RobotAPIClient {
	return &robotAPIClient{cc}
}

func (c *robotAPIClient) CreateRobot(ctx context.Context, in *RobotCReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/app.app1.v1.RobotAPI/CreateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotAPIClient) UpdateRobot(ctx context.Context, in *RobotUReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/app.app1.v1.RobotAPI/UpdateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotAPIClient) DeleteRobot(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/app.app1.v1.RobotAPI/DeleteRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotAPIClient) GetRobot(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/app.app1.v1.RobotAPI/GetRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotAPIClient) ListRobot(ctx context.Context, in *ListRobotReq, opts ...grpc.CallOption) (*ListRobotResp, error) {
	out := new(ListRobotResp)
	err := c.cc.Invoke(ctx, "/app.app1.v1.RobotAPI/ListRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotAPIServer is the server API for RobotAPI service.
type RobotAPIServer interface {
	// 机器人管理-创建
	CreateRobot(context.Context, *RobotCReq) (*UpdateResp, error)
	// 机器人管理-更新
	UpdateRobot(context.Context, *RobotUReq) (*UpdateResp, error)
	// 机器人管理-删除
	DeleteRobot(context.Context, *IDReq) (*UpdateResp, error)
	// 机器人管理-详情
	GetRobot(context.Context, *IDReq) (*Robot, error)
	// 机器人管理-列表
	ListRobot(context.Context, *ListRobotReq) (*ListRobotResp, error)
}

// UnimplementedRobotAPIServer can be embedded to have forward compatible implementations.
type UnimplementedRobotAPIServer struct {
}

func (*UnimplementedRobotAPIServer) CreateRobot(ctx context.Context, req *RobotCReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRobot not implemented")
}
func (*UnimplementedRobotAPIServer) UpdateRobot(ctx context.Context, req *RobotUReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRobot not implemented")
}
func (*UnimplementedRobotAPIServer) DeleteRobot(ctx context.Context, req *IDReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRobot not implemented")
}
func (*UnimplementedRobotAPIServer) GetRobot(ctx context.Context, req *IDReq) (*Robot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobot not implemented")
}
func (*UnimplementedRobotAPIServer) ListRobot(ctx context.Context, req *ListRobotReq) (*ListRobotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRobot not implemented")
}

func RegisterRobotAPIServer(s *grpc.Server, srv RobotAPIServer) {
	s.RegisterService(&_RobotAPI_serviceDesc, srv)
}

func _RobotAPI_CreateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotAPIServer).CreateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.app1.v1.RobotAPI/CreateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotAPIServer).CreateRobot(ctx, req.(*RobotCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotAPI_UpdateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotUReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotAPIServer).UpdateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.app1.v1.RobotAPI/UpdateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotAPIServer).UpdateRobot(ctx, req.(*RobotUReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotAPI_DeleteRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotAPIServer).DeleteRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.app1.v1.RobotAPI/DeleteRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotAPIServer).DeleteRobot(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotAPI_GetRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotAPIServer).GetRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.app1.v1.RobotAPI/GetRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotAPIServer).GetRobot(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotAPI_ListRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRobotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotAPIServer).ListRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.app1.v1.RobotAPI/ListRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotAPIServer).ListRobot(ctx, req.(*ListRobotReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RobotAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.app1.v1.RobotAPI",
	HandlerType: (*RobotAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRobot",
			Handler:    _RobotAPI_CreateRobot_Handler,
		},
		{
			MethodName: "UpdateRobot",
			Handler:    _RobotAPI_UpdateRobot_Handler,
		},
		{
			MethodName: "DeleteRobot",
			Handler:    _RobotAPI_DeleteRobot_Handler,
		},
		{
			MethodName: "GetRobot",
			Handler:    _RobotAPI_GetRobot_Handler,
		},
		{
			MethodName: "ListRobot",
			Handler:    _RobotAPI_ListRobot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app1/api/v1/robot.proto",
}

func (m *Robot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Robot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Robot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ComponentIds) > 0 {
		dAtA2 := make([]byte, len(m.ComponentIds)*10)
		var j1 int
		for _, num1 := range m.ComponentIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRobot(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Webhook) > 0 {
		i -= len(m.Webhook)
		copy(dAtA[i:], m.Webhook)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Webhook)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CreatorUid) > 0 {
		i -= len(m.CreatorUid)
		copy(dAtA[i:], m.CreatorUid)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.CreatorUid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RobotWithNickname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotWithNickname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotWithNickname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RobotCReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotCReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotCReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ComponentIds) > 0 {
		dAtA4 := make([]byte, len(m.ComponentIds)*10)
		var j3 int
		for _, num1 := range m.ComponentIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintRobot(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Webhook) > 0 {
		i -= len(m.Webhook)
		copy(dAtA[i:], m.Webhook)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Webhook)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *RobotUReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotUReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotUReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ComponentIds) > 0 {
		dAtA6 := make([]byte, len(m.ComponentIds)*10)
		var j5 int
		for _, num1 := range m.ComponentIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintRobot(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Webhook) > 0 {
		i -= len(m.Webhook)
		copy(dAtA[i:], m.Webhook)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Webhook)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRobotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRobotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRobotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ComponentId != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.ComponentId))
		i--
		dAtA[i] = 0x58
	}
	if m.TeamId != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x50
	}
	if m.Mine != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Mine))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Asc) > 0 {
		i -= len(m.Asc)
		copy(dAtA[i:], m.Asc)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Asc)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Orderby) > 0 {
		i -= len(m.Orderby)
		copy(dAtA[i:], m.Orderby)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Orderby)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Etime != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.PageNum != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x20
	}
	if m.PageSize != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRobotResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRobotResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRobotResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRobot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RobotForList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotForList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotForList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeamComponent) > 0 {
		for iNdEx := len(m.TeamComponent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamComponent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRobot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.IsDeleted != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.IsDeleted))
		i--
		dAtA[i] = 0x40
	}
	if m.MTime != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.MTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CTime != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.CTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Webhook) > 0 {
		i -= len(m.Webhook)
		copy(dAtA[i:], m.Webhook)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Webhook)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CreatorUid) > 0 {
		i -= len(m.CreatorUid)
		copy(dAtA[i:], m.CreatorUid)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.CreatorUid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RobotWithTeamAndComponentIdName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotWithTeamAndComponentIdName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotWithTeamAndComponentIdName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ComponentName) > 0 {
		i -= len(m.ComponentName)
		copy(dAtA[i:], m.ComponentName)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.ComponentName)))
		i--
		dAtA[i] = 0x22
	}
	if m.ComponentId != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.ComponentId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TeamName) > 0 {
		i -= len(m.TeamName)
		copy(dAtA[i:], m.TeamName)
		i = encodeVarintRobot(dAtA, i, uint64(len(m.TeamName)))
		i--
		dAtA[i] = 0x12
	}
	if m.TeamId != 0 {
		i = encodeVarintRobot(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRobot(dAtA []byte, offset int, v uint64) int {
	offset -= sovRobot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Robot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRobot(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.CreatorUid)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Webhook)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if len(m.ComponentIds) > 0 {
		l = 0
		for _, e := range m.ComponentIds {
			l += sovRobot(uint64(e))
		}
		n += 1 + sovRobot(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobotWithNickname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRobot(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobotCReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Webhook)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if len(m.ComponentIds) > 0 {
		l = 0
		for _, e := range m.ComponentIds {
			l += sovRobot(uint64(e))
		}
		n += 1 + sovRobot(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobotUReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRobot(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Webhook)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if len(m.ComponentIds) > 0 {
		l = 0
		for _, e := range m.ComponentIds {
			l += sovRobot(uint64(e))
		}
		n += 1 + sovRobot(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRobotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRobot(uint64(m.Id))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRobot(uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		n += 1 + sovRobot(uint64(m.PageNum))
	}
	if m.Stime != 0 {
		n += 1 + sovRobot(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovRobot(uint64(m.Etime))
	}
	l = len(m.Orderby)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Asc)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if m.Mine != 0 {
		n += 1 + sovRobot(uint64(m.Mine))
	}
	if m.TeamId != 0 {
		n += 1 + sovRobot(uint64(m.TeamId))
	}
	if m.ComponentId != 0 {
		n += 1 + sovRobot(uint64(m.ComponentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRobotResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovRobot(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovRobot(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobotForList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRobot(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.CreatorUid)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Webhook)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if m.CTime != 0 {
		n += 1 + sovRobot(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovRobot(uint64(m.MTime))
	}
	if m.IsDeleted != 0 {
		n += 1 + sovRobot(uint64(m.IsDeleted))
	}
	if len(m.TeamComponent) > 0 {
		for _, e := range m.TeamComponent {
			l = e.Size()
			n += 1 + l + sovRobot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobotWithTeamAndComponentIdName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovRobot(uint64(m.TeamId))
	}
	l = len(m.TeamName)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if m.ComponentId != 0 {
		n += 1 + sovRobot(uint64(m.ComponentId))
	}
	l = len(m.ComponentName)
	if l > 0 {
		n += 1 + l + sovRobot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRobot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRobot(x uint64) (n int) {
	return sovRobot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Robot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Robot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Robot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Webhook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRobot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ComponentIds = append(m.ComponentIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRobot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRobot
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRobot
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ComponentIds) == 0 {
					m.ComponentIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRobot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ComponentIds = append(m.ComponentIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotWithNickname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotWithNickname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotWithNickname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotCReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotCReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotCReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Webhook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRobot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ComponentIds = append(m.ComponentIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRobot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRobot
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRobot
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ComponentIds) == 0 {
					m.ComponentIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRobot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ComponentIds = append(m.ComponentIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotUReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotUReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotUReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Webhook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRobot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ComponentIds = append(m.ComponentIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRobot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRobot
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRobot
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ComponentIds) == 0 {
					m.ComponentIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRobot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ComponentIds = append(m.ComponentIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRobotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRobotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRobotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderby", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderby = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mine", wireType)
			}
			m.Mine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mine |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			m.ComponentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComponentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRobotResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRobotResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRobotResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RobotForList{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotForList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotForList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotForList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Webhook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			m.IsDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDeleted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamComponent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamComponent = append(m.TeamComponent, &RobotWithTeamAndComponentIdName{})
			if err := m.TeamComponent[len(m.TeamComponent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotWithTeamAndComponentIdName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotWithTeamAndComponentIdName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotWithTeamAndComponentIdName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			m.ComponentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComponentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRobot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRobot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRobot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRobot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRobot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRobot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRobot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRobot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRobot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRobot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRobot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRobot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRobot = fmt.Errorf("proto: unexpected end of group")
)
